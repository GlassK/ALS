#1463 1로 만들기
#check1: 아래의 단순한 방식(주석 처리한 부분)으로 하면 최적의 연산 횟수로 1을 만들 수 있다고 보장할 수 없다.
#DP(Dynamic Programming): 큰 문제를 작은 문제로 단순화시켜 해결하는 알고리즘
#N = 10일 경우 10 -> 9 -> 3 -> 1로 총 3번이면 1로 만들 수 있다
#   1) 10에서 1을 빼면 9가 된다. 여기서 9가 1이 되는 최소 횟수를 알고 있다면
#       (9가 1이 되는 최소 횟수) + 1(10에서 1을 빼 9가 되는 횟수)
#   2) 10을 2로 나누면 5가 된다. 여기서 5가 1이 되는 최소 횟수를 알고 있다면
#       (5가 1이 되는 최소 횟수) + 1(10을 2로 나눠 5가 되는 횟수)
# ... => dp[N] = min(dp[N-1], dp[N/2], dp[N-3]) + 1  각 경우의 수 중 최소 경우의 수를 찾으면 된다.
#      N이 어떤 수의 배수인지 알 수 없으므로 먼저 1을 뺀 경우를 리스트에 저장한 후 2나 3의 배수인지에 따라 경우의 수를 비교한다.
#      0부터 N까지의 반복문으로 경우의 수를 리스트에 저장해두면 최소 경우의 수를 쉽게 구할 수 있다. 
#참고: https://kangmin1012.tistory.com/34
N = int(input())
dp_list = [0, 0, 1, 1]

for i in range(4, N+1):
    dp_list.append(dp_list[i-1]+1)
    if i % 2 == 0:
        dp_list[i] = min(dp_list[i], dp_list[i//2] + 1)
    if i % 3 == 0:
        dp_list[i] = min(dp_list[i], dp_list[i//3] + 1)

print(dp_list[-1])

'''
#기존 코드
N = int(input())

min = 0
while N >= 1:
    if N == 1:
        break;

    if N%3 == 0:
        N = N//3
        min += 1
    else:
        N = N-1
        min += 1

    if N%2 == 0:
        N = N//2
        min += 1
print(min)
'''
